// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: app/src/Adicionales/BasicLexerCup.jflex

package org.example.ParserLexer;

import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.example.ErrorHandler;


@SuppressWarnings("fallthrough")
public class BasicLexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\u10fd\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\6\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\11\16\1\17\1\0\1\20\1\21"+
    "\1\22\1\23\1\24\32\25\1\0\1\26\1\0\1\27"+
    "\2\0\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\25\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\25\1\56\1\57\1\60\1\61\u0204\0\1\62"+
    "\1\0\1\63\172\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\17\23\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\0\3\23\1\47\5\23\1\50\11\23\2\0\1\51"+
    "\1\52\1\53\1\54\1\0\1\2\6\23\1\55\3\23"+
    "\1\56\7\23\1\2\2\0\1\57\1\23\1\60\1\61"+
    "\1\62\1\23\1\63\1\23\1\64\1\65\5\23\1\66"+
    "\1\23\1\0\1\67\1\70\1\23\1\71\1\72\3\23"+
    "\1\73\1\74\1\75\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\150\0\150"+
    "\0\u0104\0\u0138\0\150\0\u016c\0\150\0\u01a0\0\150\0\u01d4"+
    "\0\150\0\u0208\0\u023c\0\u0270\0\150\0\u02a4\0\u02d8\0\150"+
    "\0\150\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\150\0\150\0\150\0\150\0\150\0\u064c\0\150"+
    "\0\u0680\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u02d8\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u02d8\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0618\0\u0a5c\0\150"+
    "\0\150\0\150\0\150\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u02d8\0\u0c30\0\u0c64\0\u0c98\0\u02d8"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0618"+
    "\0\u0e38\0\u0e6c\0\u02d8\0\u0ea0\0\u02d8\0\u02d8\0\u02d8\0\u0ed4"+
    "\0\u02d8\0\u0f08\0\u02d8\0\u02d8\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u02d8\0\u1040\0\u1074\0\u02d8\0\u02d8\0\u10a8\0\u02d8"+
    "\0\u02d8\0\u10dc\0\u1110\0\u1144\0\u02d8\0\u02d8\0\u02d8\0\u02d8"+
    "\0\u02d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\27\1\41"+
    "\1\27\1\42\1\43\2\27\1\44\1\45\1\46\2\27"+
    "\1\47\1\50\1\27\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\57\2\3\1\57\1\60\20\57\1\61\35\57"+
    "\66\0\1\4\102\0\1\62\51\0\1\63\64\0\1\64"+
    "\65\0\1\65\65\0\1\66\64\0\2\20\66\0\1\67"+
    "\63\0\1\70\63\0\1\71\56\0\1\72\64\0\2\27"+
    "\6\0\1\27\2\0\26\27\23\0\2\27\6\0\1\27"+
    "\2\0\17\27\1\73\6\27\23\0\2\27\6\0\1\27"+
    "\2\0\17\27\1\74\6\27\23\0\2\27\6\0\1\27"+
    "\2\0\7\27\1\75\16\27\23\0\2\27\6\0\1\27"+
    "\2\0\15\27\1\76\10\27\23\0\2\27\6\0\1\27"+
    "\2\0\12\27\1\77\13\27\23\0\2\27\6\0\1\27"+
    "\2\0\12\27\1\100\2\27\1\101\4\27\1\102\3\27"+
    "\23\0\2\27\6\0\1\27\2\0\12\27\1\103\13\27"+
    "\23\0\2\27\6\0\1\27\2\0\5\27\1\104\5\27"+
    "\1\105\1\106\11\27\23\0\2\27\6\0\1\27\2\0"+
    "\4\27\1\107\21\27\23\0\2\27\6\0\1\27\2\0"+
    "\1\110\25\27\23\0\2\27\6\0\1\27\2\0\1\111"+
    "\25\27\23\0\2\27\6\0\1\27\2\0\4\27\1\112"+
    "\21\27\23\0\2\27\6\0\1\27\2\0\21\27\1\113"+
    "\4\27\23\0\2\27\6\0\1\27\2\0\15\27\1\114"+
    "\10\27\23\0\2\27\6\0\1\27\2\0\7\27\1\115"+
    "\16\27\6\0\7\116\1\117\54\116\2\57\2\0\1\57"+
    "\1\0\20\57\1\0\35\57\5\0\1\120\36\0\1\121"+
    "\2\0\1\122\1\0\1\123\21\0\1\124\4\0\1\125"+
    "\64\0\2\27\6\0\1\27\2\0\17\27\1\126\6\27"+
    "\23\0\2\27\6\0\1\27\2\0\4\27\1\127\21\27"+
    "\23\0\2\27\6\0\1\27\2\0\1\130\25\27\23\0"+
    "\2\27\6\0\1\27\2\0\10\27\1\131\7\27\1\132"+
    "\5\27\23\0\2\27\6\0\1\27\2\0\15\27\1\133"+
    "\10\27\23\0\2\27\6\0\1\27\2\0\17\27\1\134"+
    "\6\27\23\0\2\27\6\0\1\27\2\0\14\27\1\135"+
    "\11\27\23\0\2\27\6\0\1\27\2\0\15\27\1\136"+
    "\10\27\23\0\2\27\6\0\1\27\2\0\16\27\1\137"+
    "\7\27\23\0\2\27\6\0\1\27\2\0\21\27\1\140"+
    "\4\27\23\0\2\27\6\0\1\27\2\0\4\27\1\141"+
    "\21\27\23\0\2\27\6\0\1\27\2\0\21\27\1\142"+
    "\4\27\23\0\2\27\6\0\1\27\2\0\17\27\1\143"+
    "\6\27\23\0\2\27\6\0\1\27\2\0\21\27\1\144"+
    "\4\27\23\0\2\27\6\0\1\27\2\0\17\27\1\145"+
    "\6\27\23\0\2\27\6\0\1\27\2\0\10\27\1\146"+
    "\15\27\23\0\2\27\6\0\1\27\2\0\10\27\1\147"+
    "\15\27\6\0\7\116\1\117\4\116\1\0\43\116\1\150"+
    "\3\116\7\151\1\152\54\151\2\125\1\4\1\5\60\125"+
    "\15\0\2\27\6\0\1\27\2\0\25\27\1\153\23\0"+
    "\2\27\6\0\1\27\2\0\1\154\25\27\23\0\2\27"+
    "\6\0\1\27\2\0\17\27\1\155\6\27\23\0\2\27"+
    "\6\0\1\27\2\0\5\27\1\156\20\27\23\0\2\27"+
    "\6\0\1\27\2\0\4\27\1\157\21\27\23\0\2\27"+
    "\6\0\1\27\2\0\1\160\25\27\23\0\2\27\6\0"+
    "\1\27\2\0\2\27\1\161\23\27\23\0\2\27\6\0"+
    "\1\27\2\0\1\27\1\162\24\27\23\0\2\27\6\0"+
    "\1\27\2\0\17\27\1\163\6\27\23\0\2\27\6\0"+
    "\1\27\2\0\17\27\1\164\6\27\23\0\2\27\6\0"+
    "\1\27\2\0\17\27\1\165\6\27\23\0\2\27\6\0"+
    "\1\27\2\0\1\166\25\27\23\0\2\27\6\0\1\27"+
    "\2\0\22\27\1\167\3\27\23\0\2\27\6\0\1\27"+
    "\2\0\10\27\1\170\11\27\1\171\3\27\23\0\2\27"+
    "\6\0\1\27\2\0\3\27\1\172\22\27\23\0\2\27"+
    "\6\0\1\27\2\0\12\27\1\173\13\27\6\0\7\151"+
    "\1\174\54\151\7\0\1\152\4\0\1\4\64\0\2\27"+
    "\6\0\1\27\2\0\11\27\1\175\14\27\23\0\2\27"+
    "\6\0\1\27\2\0\21\27\1\176\4\27\23\0\2\27"+
    "\6\0\1\27\2\0\1\177\25\27\23\0\2\27\6\0"+
    "\1\27\2\0\25\27\1\200\23\0\2\27\6\0\1\27"+
    "\2\0\13\27\1\201\12\27\23\0\2\27\6\0\1\27"+
    "\2\0\17\27\1\202\6\27\23\0\2\27\6\0\1\27"+
    "\2\0\14\27\1\203\11\27\23\0\2\27\6\0\1\27"+
    "\2\0\2\27\1\204\23\27\23\0\2\27\6\0\1\27"+
    "\2\0\4\27\1\205\21\27\6\0\7\151\1\174\4\151"+
    "\1\4\47\151\15\0\2\27\6\0\1\27\2\0\12\27"+
    "\1\206\13\27\23\0\2\27\6\0\1\27\2\0\14\27"+
    "\1\207\11\27\23\0\2\27\6\0\1\27\2\0\6\27"+
    "\1\210\17\27\23\0\2\27\6\0\1\27\2\0\21\27"+
    "\1\211\4\27\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4472];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\2\1\2\11"+
    "\20\1\5\11\1\1\1\11\1\1\10\11\1\0\23\1"+
    "\2\0\4\11\1\0\24\1\2\0\21\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    private FileWriter tokenWriter;

    // Declaración de la tabla de símbolos
    private Map<String, Simbolo> tablaSimbolos = new HashMap<>();

    // Definición de la clase Simbolo
    public class Simbolo {
        public String nombre;
        public String tipo;
        public int linea;
        public int columna;

        public Simbolo(String nombre, String tipo, int linea, int columna) {
            this.nombre = nombre;
            this.tipo = tipo;
            this.linea = linea;
            this.columna = columna;
        }
    }

    // Método para inicializar el logger
    private void initTokenLogger() {
        try {
            tokenWriter = new FileWriter("app/src/main/resources/tokens.log");
            tokenWriter.write("=== TOKENS ENCONTRADOS ===\n");
            tokenWriter.write(String.format("%-20s %-20s %-10s %-10s\n", 
                                "TOKEN", "LEXEMA", "LÍNEA", "COLUMNA"));
            tokenWriter.flush();
        } catch (IOException e) {
            System.err.println("Error inicializando archivo de tokens: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void logToken(String tokenType, String lexeme) {
        if (tokenWriter != null) {
            try {
                tokenWriter.write(String.format("%-20s %-20s %-10d %-10d\n", 
                    tokenType, lexeme, yyline + 1, yycolumn + 1));
                tokenWriter.flush();

                // Agregar a la tabla de símbolos si es identificador o literal
                if (tokenType.equals("IDENTIFIER") || tokenType.endsWith("_LITERAL") || tokenType.equals("CHAR_T")) {
                    agregarSimbolo(lexeme, tokenType);
                }
            } catch (IOException e) {
                System.err.println("Error escribiendo token: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private void agregarSimbolo(String nombre, String tipo) {
        if (!tablaSimbolos.containsKey(nombre)) {
            tablaSimbolos.put(nombre, new Simbolo(nombre, tipo, yyline + 1, yycolumn + 1));
        }
    }

    public void exportarTablaSimbolos() {
        try (FileWriter writer = new FileWriter("app/src/main/resources/tabla_simbolos.log")) {
            writer.write("=== TABLA DE SÍMBOLOS ===\n");
            writer.write(String.format("%-20s %-20s %-10s %-10s\n", "NOMBRE", "TIPO", "LÍNEA", "COLUMNA"));

            for (Simbolo s : tablaSimbolos.values()) {
                writer.write(String.format("%-20s %-20s %-10d %-10d\n", 
                    s.nombre, s.tipo, s.linea, s.columna));
            }
            writer.flush();
            System.out.println("Tabla de símbolos exportada correctamente.");
        } catch (IOException e) {
            System.err.println("Error exportando tabla de símbolos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private Symbol symbol(int type) {
        String tokenName = (type >= 0 && type < sym.terminalNames.length) ? sym.terminalNames[type] : "UNKNOWN";
        logToken(tokenName, yytext());
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        String tokenName = (type >= 0 && type < sym.terminalNames.length) ? sym.terminalNames[type] : "UNKNOWN";
        logToken(tokenName, yytext());
        return new Symbol(type, yyline, yycolumn, value);
    }

    // Método para cerrar el archivo y exportar tabla de símbolos
    public void closeTokenLogger() {
        if (tokenWriter != null) {
            try {
                tokenWriter.close();
                // Exportar tabla de símbolos al finalizar
                exportarTablaSimbolos();
            } catch (IOException e) {
                System.err.println("Error cerrando archivo de tokens: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private ErrorHandler errorHandler;

    public void setErrorHandler(ErrorHandler handler) {
        this.errorHandler = handler;
    }

    // Método handleError CORREGIDO
    private Symbol handleLexicalError() {
        String mensaje = "Carácter ilegal '" + yytext() + "'";
        int linea = yyline + 1;
        int columna = yycolumn + 1;

        if (errorHandler != null) {
            errorHandler.reportError(linea, columna, mensaje, "LÉXICO");
        } else {
            System.err.println("Error léxico: " + mensaje + " en la línea " + linea + ", columna " + columna);
        }

        yybegin(YYINITIAL);  // Reinicia análisis
        return new Symbol(sym.error, yyline, yycolumn, yytext());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BasicLexerCup(java.io.Reader in) {
      System.out.println("Inicializando analizador léxico...");
    initTokenLogger();
    System.out.println("Analizador léxico inicializado correctamente.");
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    System.out.println("Cerrando analizador léxico...");
    closeTokenLogger();
    System.out.println("Analizador léxico cerrado correctamente.");
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return handleLexicalError();
            }
          // fall through
          case 64: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 65: break;
          case 3:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 66: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 67: break;
          case 5:
            { return symbol(sym.DISJUNCION);
            }
          // fall through
          case 68: break;
          case 6:
            { return symbol(sym.MULTI);
            }
          // fall through
          case 69: break;
          case 7:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 70: break;
          case 8:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 71: break;
          case 9:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 72: break;
          case 10:
            { return symbol(sym.DOT);
            }
          // fall through
          case 73: break;
          case 11:
            { return symbol(sym.ENDBLOC);
            }
          // fall through
          case 74: break;
          case 12:
            { return symbol(sym.INTEGER_LITERAL, yytext());
            }
          // fall through
          case 75: break;
          case 13:
            { return symbol(sym.DOSDOT);
            }
          // fall through
          case 76: break;
          case 14:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 77: break;
          case 15:
            { return symbol(sym.ASIGNACION);
            }
          // fall through
          case 78: break;
          case 16:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 79: break;
          case 17:
            { return symbol(sym.FINLINEA);
            }
          // fall through
          case 80: break;
          case 18:
            { return symbol(sym.ARROBA);
            }
          // fall through
          case 81: break;
          case 19:
            { return symbol(sym.IDENTIFIER, yytext());
            }
          // fall through
          case 82: break;
          case 20:
            { return symbol(sym.INITBLOC);
            }
          // fall through
          case 83: break;
          case 21:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 84: break;
          case 22:
            { return symbol(sym.STBCOMMENT);
            }
          // fall through
          case 85: break;
          case 23:
            { return symbol(sym.PIPE);
            }
          // fall through
          case 86: break;
          case 24:
            { return symbol(sym.ENDBCOMMENT);
            }
          // fall through
          case 87: break;
          case 25:
            { return symbol(sym.MOD);
            }
          // fall through
          case 88: break;
          case 26:
            { return symbol(sym.PARENTIZ);
            }
          // fall through
          case 89: break;
          case 27:
            { return symbol(sym.PARENTDE);
            }
          // fall through
          case 90: break;
          case 28:
            { string.append(yytext());
            }
          // fall through
          case 91: break;
          case 29:
            { yybegin(YYINITIAL); 
                         return symbol(sym.STRING_LITERAL, string.toString());
            }
          // fall through
          case 92: break;
          case 30:
            { string.append('\\');
            }
          // fall through
          case 93: break;
          case 31:
            { return symbol(sym.DIFE);
            }
          // fall through
          case 94: break;
          case 32:
            { return symbol(sym.POTE);
            }
          // fall through
          case 95: break;
          case 33:
            { return symbol(sym.SUMUN);
            }
          // fall through
          case 96: break;
          case 34:
            { return symbol(sym.RESUN);
            }
          // fall through
          case 97: break;
          case 35:
            { return symbol(sym.DIV);
            }
          // fall through
          case 98: break;
          case 36:
            { return symbol(sym.MENEQUQUE);
            }
          // fall through
          case 99: break;
          case 37:
            { return symbol(sym.COMPARACION);
            }
          // fall through
          case 100: break;
          case 38:
            { return symbol(sym.MAYEQUQUE);
            }
          // fall through
          case 101: break;
          case 39:
            { return symbol(sym.DO);
            }
          // fall through
          case 102: break;
          case 40:
            { return symbol(sym.IF);
            }
          // fall through
          case 103: break;
          case 41:
            { string.append('\"');
            }
          // fall through
          case 104: break;
          case 42:
            { string.append('\n');
            }
          // fall through
          case 105: break;
          case 43:
            { string.append('\r');
            }
          // fall through
          case 106: break;
          case 44:
            { string.append('\t');
            }
          // fall through
          case 107: break;
          case 45:
            { return symbol(sym.FOR);
            }
          // fall through
          case 108: break;
          case 46:
            { return symbol(sym.INTEGER_T);
            }
          // fall through
          case 109: break;
          case 47:
            { return symbol(sym.ARRX);
            }
          // fall through
          case 110: break;
          case 48:
            { return symbol(sym.CHAR_T);
            }
          // fall through
          case 111: break;
          case 49:
            { return symbol(sym.ELIF);
            }
          // fall through
          case 112: break;
          case 50:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 113: break;
          case 51:
            { return symbol(sym.FUNC);
            }
          // fall through
          case 114: break;
          case 52:
            { return symbol(sym.IMPR);
            }
          // fall through
          case 115: break;
          case 53:
            { return symbol(sym.LEER);
            }
          // fall through
          case 116: break;
          case 54:
            { return symbol(sym.VOID);
            }
          // fall through
          case 117: break;
          case 55:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 118: break;
          case 56:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 119: break;
          case 57:
            { return symbol(sym.MATRX);
            }
          // fall through
          case 120: break;
          case 58:
            { return symbol(sym.PARAM);
            }
          // fall through
          case 121: break;
          case 59:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 122: break;
          case 60:
            { return symbol(sym.GLOBAL);
            }
          // fall through
          case 123: break;
          case 61:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 124: break;
          case 62:
            { return symbol(sym.STRING_T);
            }
          // fall through
          case 125: break;
          case 63:
            { return symbol(sym.STRUCT);
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
