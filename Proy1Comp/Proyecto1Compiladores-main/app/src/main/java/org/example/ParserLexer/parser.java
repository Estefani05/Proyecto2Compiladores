
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.ParserLexer;

import java_cup.runtime.*;
import org.example.ErrorHandler;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\015\002\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\004" +
    "\000\002\004\003\000\002\004\007\000\002\004\005\000" +
    "\002\004\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\007\000\002\006" +
    "\005\000\002\007\005\000\002\007\004\000\002\016\002" +
    "\000\002\007\005\000\002\010\003\000\002\010\004\000" +
    "\002\011\007\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\013\003\000\002\013\005\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\016\002\ufffe\003\000\004\000\005\000\006" +
    "\000\014\000\001\002\000\004\002\110\001\002\000\014" +
    "\003\013\004\007\005\010\006\016\014\006\001\002\000" +
    "\006\011\ufff4\016\104\001\002\000\006\003\ufff7\011\ufff7" +
    "\001\002\000\006\003\ufff6\011\ufff6\001\002\000\016\002" +
    "\uffff\003\013\004\007\005\010\006\016\014\006\001\002" +
    "\000\016\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\014" +
    "\ufffd\001\002\000\006\010\052\020\053\001\002\000\004" +
    "\011\017\001\002\000\016\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\014\ufffb\001\002\000\006\003\ufff5\011\ufff5" +
    "\001\002\000\006\007\021\010\020\001\002\000\016\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\014\ufff9\001\002" +
    "\000\012\011\025\012\022\013\026\017\024\001\002\000" +
    "\024\010\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\001\002\000\024\010\uffe1\020" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\001\002\000\012\011\025\012\022\013\026\017" +
    "\024\001\002\000\024\010\uffdc\020\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\001\002\000" +
    "\024\010\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\001\002\000\016\010\036\023" +
    "\040\024\035\027\037\030\042\031\041\001\002\000\024" +
    "\010\uffe7\020\uffe7\023\uffe7\024\uffe7\025\031\026\032\027" +
    "\uffe7\030\uffe7\031\uffe7\001\002\000\012\011\025\012\022" +
    "\013\026\017\024\001\002\000\012\011\025\012\022\013" +
    "\026\017\024\001\002\000\024\010\uffdf\020\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\001" +
    "\002\000\024\010\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\001\002\000\012\011" +
    "\025\012\022\013\026\017\024\001\002\000\016\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\014\ufffa\001\002\000" +
    "\012\011\025\012\022\013\026\017\024\001\002\000\012" +
    "\011\025\012\022\013\026\017\024\001\002\000\012\011" +
    "\025\012\022\013\026\017\024\001\002\000\012\011\025" +
    "\012\022\013\026\017\024\001\002\000\024\010\uffe3\020" +
    "\uffe3\023\uffe3\024\uffe3\025\031\026\032\027\uffe3\030\uffe3" +
    "\031\uffe3\001\002\000\024\010\uffe2\020\uffe2\023\uffe2\024" +
    "\uffe2\025\031\026\032\027\uffe2\030\uffe2\031\uffe2\001\002" +
    "\000\024\010\uffe6\020\uffe6\023\uffe6\024\uffe6\025\031\026" +
    "\032\027\uffe6\030\uffe6\031\uffe6\001\002\000\024\010\uffe4" +
    "\020\uffe4\023\uffe4\024\uffe4\025\031\026\032\027\uffe4\030" +
    "\uffe4\031\uffe4\001\002\000\024\010\uffe5\020\uffe5\023\uffe5" +
    "\024\uffe5\025\031\026\032\027\uffe5\030\uffe5\031\uffe5\001" +
    "\002\000\016\020\051\023\040\024\035\027\037\030\042" +
    "\031\041\001\002\000\024\010\uffdb\020\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\001\002" +
    "\000\016\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\014" +
    "\ufff8\001\002\000\006\003\054\021\055\001\002\000\004" +
    "\022\uffef\001\002\000\020\003\062\004\007\005\010\006" +
    "\016\014\057\015\064\022\061\001\002\000\016\002\ufff2" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\014\ufff2\001\002\000" +
    "\006\003\ufff4\011\ufff4\001\002\000\020\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\014\uffed\015\uffed\022\uffed\001\002\000" +
    "\016\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006\ufff0\014\ufff0" +
    "\001\002\000\004\010\100\001\002\000\006\003\072\011" +
    "\073\001\002\000\012\011\025\012\022\013\026\017\024" +
    "\001\002\000\020\003\062\004\007\005\010\006\016\014" +
    "\057\015\064\022\067\001\002\000\020\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\014\uffec\015\uffec\022\uffec\001\002\000" +
    "\016\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\014\ufff1" +
    "\001\002\000\016\010\071\023\040\024\035\027\037\030" +
    "\042\031\041\001\002\000\020\003\uffea\004\uffea\005\uffea" +
    "\006\uffea\014\uffea\015\uffea\022\uffea\001\002\000\004\010" +
    "\077\001\002\000\004\007\074\001\002\000\012\011\025" +
    "\012\022\013\026\017\024\001\002\000\016\010\076\023" +
    "\040\024\035\027\037\030\042\031\041\001\002\000\020" +
    "\003\uffeb\004\uffeb\005\uffeb\006\uffeb\014\uffeb\015\uffeb\022" +
    "\uffeb\001\002\000\020\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\014\uffe8\015\uffe8\022\uffe8\001\002\000\020\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\014\uffe9\015\uffe9\022\uffe9\001\002" +
    "\000\004\022\102\001\002\000\016\002\uffee\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\014\uffee\001\002\000\016\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\014\ufffc\001\002\000" +
    "\004\017\105\001\002\000\004\020\106\001\002\000\006" +
    "\003\054\021\055\001\002\000\016\002\ufff3\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\014\ufff3\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\002\003\015\004\001\001\000\002\001" +
    "\001\000\012\003\010\004\011\005\013\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\102\005\013\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\026\013\027\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\047\013\027\014\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\033\001\001\000\004\014\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\046\014\022\001\001\000\002\001\001\000\006\013\045" +
    "\014\022\001\001\000\006\013\044\014\022\001\001\000" +
    "\006\013\043\014\022\001\001\000\006\013\042\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\055\001" +
    "\001\000\004\016\100\001\001\000\010\005\062\010\064" +
    "\011\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\067\013\027\014\022\001\001\000" +
    "\006\005\062\011\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\074\013\027\014\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\106\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


     /* CÓDIGO DE JAVA */
     /*CODIGO DE JAVA
     https://www.jflex.de/
     http://www2.cs.tum.edu/projects/cup/examples.php*/
 
     public void hola(){
         System.out.println("Inicio Cup");
     }
 @@ -17,194 +33,176 @@ action code {:
 parser code {:
     // Conectar este parser con un scanner
     BasicLexerCup lex;
     
     // Variables para manejo de errores
     public int errorCount = 0;
     private ErrorHandler errorHandler;
     
     // Método para establecer el ErrorHandler
     // Entrada: instancia de ErrorHandler
     // Salida: Asigna el handler al parser
     public void setErrorHandler(ErrorHandler handler) {
         this.errorHandler = handler;
     }
     
     // Método para reportar errores
     // Entrada: mensaje de error y símbolo actual
     // Salida: Error registrado en consola o ErrorHandler
     public void report_error(String message, Object info) {
         StringBuilder errorMessage = new StringBuilder();
         int line = 0;
         int column = 0;
         
         if (info instanceof java_cup.runtime.Symbol) {
             java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
             if (s.left >= 0) {
                 line = s.left + 1;
                 if (s.right >= 0) {
                     column = s.right + 1;
                 }
             }
         }
         
         // Usar el ErrorHandler si está disponible
         if (errorHandler != null) {
             errorHandler.reportError(line, column, message, "SINTÁCTICO");
         } else {
             // Fallback al comportamiento original
             errorMessage.append("Error sintáctico: ");
             if (line > 0) {
                 errorMessage.append("línea " + line);
                 if (column > 0) {
                     errorMessage.append(", columna " + column);
                 }
             }
             errorMessage.append(": " + message);
             System.err.println(errorMessage.toString());
         }
         
         errorCount++;
     }
     
     // Método para recuperación de errores sintácticos
     // Entrada: símbolo actual en el cual ocurrió el error
     // Salida: Reporte de error por consola o ErrorHandler
     public void syntax_error(Symbol cur_token) {
         String tokenName = symbl_name_from_id(cur_token.sym);
         String tokenValue = (cur_token.value != null) ? cur_token.value.toString() : "?";
         
         report_error("Error cerca de " + tokenName + " '" + tokenValue + "'", cur_token);
         
         // Si hay un ErrorHandler y está en pánico, detener el análisis
         if (errorHandler != null && errorHandler.isInPanicMode() && !errorHandler.shouldContinue()) {
             throw new RuntimeException("Análisis sintáctico abortado en modo pánico");
         }
     }
     
     // Método para errores sintácticos irrecuperables
     // Entrada: símbolo en el cual falló irrecuperablemente
     // Salida: Lanza excepción para abortar el análisis
     public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
         // Entrar en modo pánico si hay un ErrorHandler
         if (errorHandler != null) {
             errorHandler.enterPanicMode();
             report_error("Error sintáctico fatal. Compilación abortada", cur_token);
         } else {
             report_error("Error sintáctico fatal. Compilación abortada", cur_token);
         }
         
         throw new java.lang.Exception("Error sintáctico irrecuperable");
     }
     
     // Método auxiliar para obtener el nombre textual de un token
     // Entrada: id del token (int)
     // Salida: nombre del token (String)
     public String symbl_name_from_id(int id) {
         return (id >= 0 && id < sym.terminalNames.length) ? 
                sym.terminalNames[id] : "UNKNOWN_TOKEN";
     }
 
     @SuppressWarnings("deprecation")
     public parser(BasicLexerCup lex){
         this.lex = lex;
         this.symbolFactory = new DefaultSymbolFactory();
         
         // Si el lexer tiene un ErrorHandler, lo usamos
         if (lex != null) {
             try {
                 // Usamos reflection para obtener el errorHandler del lexer
                 java.lang.reflect.Field f = lex.getClass().getDeclaredField("errorHandler");
                 f.setAccessible(true);
                 Object handler = f.get(lex);
                 if (handler instanceof ErrorHandler) {
                     this.errorHandler = (ErrorHandler) handler;
                     System.out.println("ErrorHandler conectado desde lexer a parser");
                 }
             } catch (Exception e) {
                 System.err.println("No se pudo obtener ErrorHandler del lexer: " + e.getMessage());
             }
         }
     }
 
 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 hola(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 declaraciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 adios(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= 
            {
              Object RESULT =null;
		 hola(); adios(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= funcion_main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= tipo_dato IDENTIFIER ASIGNA expresion FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= tipo_dato IDENTIFIER FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= error FINLINEA 
            {
              Object RESULT =null;
		
                    parser.report_error("Error en la sintaxis de declaración", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= INTEGER_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= STRING_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion_main ::= INT MAIN PARENTESIS_A PARENTESIS_C bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion_main ::= error PARENTESIS_C bloque 
            {
              Object RESULT =null;
		
                    parser.report_error("Error en la declaración de la función main", null);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bloque ::= BLOQUE_A sentencias BLOQUE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque ::= BLOQUE_A BLOQUE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;

              parser.report_error("Error en el bloque de código", null);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= error NT$1 BLOQUE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= tipo_dato IDENTIFIER ASIGNA expresion FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= RETURN expresion FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= error FINLINEA 
            {
              Object RESULT =null;
		
                parser.report_error("Error en sentencia", null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= tipo_dato error FINLINEA 
            {
              Object RESULT =null;
		
                parser.report_error("Error en declaración de variable", null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion IGUAL termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MAYOR termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MENOR termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
