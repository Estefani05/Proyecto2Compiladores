
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.ParserLexer;

import java_cup.runtime.*;
import org.example.ErrorHandler;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\055\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\053\011\000\002\025\005\000\002\025\003" +
    "\000\002\025\002\000\002\026\004\000\002\006\006\000" +
    "\002\007\005\000\002\010\004\000\002\010\002\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\033\011\000\002\034\010\000\002\034" +
    "\002\000\002\035\004\000\002\035\002\000\002\036\011" +
    "\000\002\037\013\000\002\031\003\000\002\031\003\000" +
    "\002\040\012\000\002\041\004\000\002\041\002\000\002" +
    "\042\006\000\002\043\003\000\002\043\003\000\002\032" +
    "\005\000\002\032\002\000\002\045\005\000\002\045\010" +
    "\000\002\045\007\000\002\044\004\000\002\044\002\000" +
    "\002\046\005\000\002\046\005\000\002\016\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\004\000\002\020" +
    "\003\000\002\020\003\000\002\014\005\000\002\014\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\054" +
    "\003\000\002\054\003\000\002\024\006\000\002\024\010" +
    "\000\002\047\006\000\002\027\005\000\002\027\003\000" +
    "\002\027\002\000\002\050\004\000\002\051\006\000\002" +
    "\052\006\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\032\003\006\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\035\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\076\ufffd\001\002\000\030\021\025\022\024\023\013\024" +
    "\020\025\015\035\011\040\026\041\016\042\027\043\010" +
    "\076\017\001\002\000\004\002\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002\000\004\037\ufff4" +
    "\001\002\000\004\037\ufff8\001\002\000\032\002\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\035\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\076\ufffb\001\002\000\004\072" +
    "\323\001\002\000\032\002\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\035\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\076\ufffc\001\002\000\020\024\020\025\015\035\011" +
    "\040\026\041\016\042\027\043\010\001\002\000\004\037" +
    "\ufff6\001\002\000\004\077\321\001\002\000\020\024\020" +
    "\025\015\035\011\040\026\041\016\042\027\043\010\001" +
    "\002\000\032\002\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\035\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\076" +
    "\ufffe\001\002\000\004\037\312\001\002\000\032\002\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\035\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\076\ufffa\001\002\000\020" +
    "\024\020\025\015\035\011\040\026\041\016\042\027\043" +
    "\010\001\002\000\020\024\020\025\015\035\011\040\026" +
    "\041\016\042\027\043\010\001\002\000\004\037\ufff7\001" +
    "\002\000\004\037\ufff5\001\002\000\030\002\ufffd\021\ufffd" +
    "\022\ufffd\024\ufffd\025\ufffd\035\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\076\ufffd\001\002\000\030\002\000\021\025" +
    "\022\024\024\020\025\015\035\011\040\026\041\016\042" +
    "\027\043\010\076\017\001\002\000\004\037\033\001\002" +
    "\000\006\057\034\075\uffc5\001\002\000\034\033\046\034" +
    "\053\036\060\037\042\044\055\045\044\055\041\060\037" +
    "\061\065\066\054\067\061\072\040\104\062\001\002\000" +
    "\004\075\036\001\002\000\034\002\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\035\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\075\uffc7\076\uffc7\001\002\000\022\033\uffa4" +
    "\034\uffa4\036\uffa4\037\uffa4\044\uffa4\045\uffa4\072\uffa4\104" +
    "\uffa4\001\002\000\034\033\046\034\053\036\060\037\042" +
    "\044\055\045\044\055\041\060\037\061\065\066\054\067" +
    "\061\072\040\104\062\001\002\000\032\033\046\034\053" +
    "\036\060\037\042\044\055\045\044\060\037\061\065\066" +
    "\054\067\061\072\040\104\062\001\002\000\104\002\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\035\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\046\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\070\uff91\072\124" +
    "\073\uff91\074\uff91\075\uff91\076\uff91\102\uff91\103\123\001" +
    "\002\000\100\002\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\046" +
    "\110\047\114\050\105\051\112\052\117\053\uffbb\054\uffbb" +
    "\056\103\060\111\061\116\062\113\063\106\064\115\065" +
    "\107\070\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\102\uffbb" +
    "\001\002\000\100\002\uff95\021\uff95\022\uff95\023\uff95\024" +
    "\uff95\025\uff95\035\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\056\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\070\uff95\073\uff95\074\uff95\075\uff95\076\uff95\102" +
    "\uff95\001\002\000\100\002\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\056\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\070\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\102\uff92\001\002\000\100\002\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\uff96\035\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\056\uff96\060\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\070\uff96\073\uff96\074\uff96\075\uff96\076" +
    "\uff96\102\uff96\001\002\000\100\002\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\035\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\056\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\070\uffae\073\uffae\074\uffae\075\uffae" +
    "\076\uffae\102\uffae\001\002\000\100\002\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\035\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\060\uffb3\061\uffb3\062\075" +
    "\063\077\064\076\065\uffb3\070\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\076\uffb3\102\uffb3\001\002\000\100\002\uff93\021\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\035\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\056\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\070\uff93\073\uff93\074\uff93" +
    "\075\uff93\076\uff93\102\uff93\001\002\000\034\002\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\035\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\075\uffc6\076\uffc6\001\002\000" +
    "\100\002\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\035\uff97\040\uff97\041\uff97\042\uff97\043\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\070" +
    "\uff97\073\uff97\074\uff97\075\uff97\076\uff97\102\uff97\001\002" +
    "\000\004\037\074\001\002\000\100\002\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\035\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\056\uff94\060\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\070\uff94\073\uff94\074\uff94\075" +
    "\uff94\076\uff94\102\uff94\001\002\000\100\002\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\035\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\056\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\070\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\102\uffb2\001\002\000\050\002\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\035\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\053\uffc0\054\uffc0\070\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\102\uffc0\001\002\000\100" +
    "\002\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\035" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\056\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\070\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\102\uff99\001\002\000" +
    "\004\037\073\001\002\000\100\002\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\035\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\056\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\070\uff98\073\uff98\074\uff98\075\uff98" +
    "\076\uff98\102\uff98\001\002\000\022\033\046\034\053\036" +
    "\060\037\042\044\055\045\044\072\040\104\062\001\002" +
    "\000\050\002\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\035\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\053\067" +
    "\054\070\070\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\102" +
    "\uffc2\001\002\000\022\033\uffa3\034\uffa3\036\uffa3\037\uffa3" +
    "\044\uffa3\045\uffa3\072\uffa3\104\uffa3\001\002\000\032\033" +
    "\046\034\053\036\060\037\042\044\055\045\044\060\037" +
    "\061\065\066\054\067\061\072\040\104\062\001\002\000" +
    "\032\033\uffbd\034\uffbd\036\uffbd\037\uffbd\044\uffbd\045\uffbd" +
    "\060\uffbd\061\uffbd\066\uffbd\067\uffbd\072\uffbd\104\uffbd\001" +
    "\002\000\032\033\uffbe\034\uffbe\036\uffbe\037\uffbe\044\uffbe" +
    "\045\uffbe\060\uffbe\061\uffbe\066\uffbe\067\uffbe\072\uffbe\104" +
    "\uffbe\001\002\000\050\002\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\053\uffc1\054\uffc1\070\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\102\uffc1\001\002\000\100\002\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\035\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\070\uffa7\073\uffa7\074\uffa7\075" +
    "\uffa7\076\uffa7\102\uffa7\001\002\000\100\002\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\035\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\056\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\102\uffa5\001\002\000\100\002\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\035\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\070\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\102\uffa6\001\002\000\022\033\046" +
    "\034\053\036\060\037\042\044\055\045\044\072\040\104" +
    "\062\001\002\000\022\033\046\034\053\036\060\037\042" +
    "\044\055\045\044\072\040\104\062\001\002\000\022\033" +
    "\046\034\053\036\060\037\042\044\055\045\044\072\040" +
    "\104\062\001\002\000\100\002\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\035\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\070\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\102\uffb0\001\002\000\100\002\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\035\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\070\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\102\uffaf\001\002\000\100\002\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\035\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\056\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\070\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\102\uffb1\001\002\000\032\033\uffb6\034\uffb6" +
    "\036\uffb6\037\uffb6\044\uffb6\045\uffb6\060\uffb6\061\uffb6\066" +
    "\uffb6\067\uffb6\072\uffb6\104\uffb6\001\002\000\022\033\046" +
    "\034\053\036\060\037\042\044\055\045\044\072\040\104" +
    "\062\001\002\000\032\033\uffb7\034\uffb7\036\uffb7\037\uffb7" +
    "\044\uffb7\045\uffb7\060\uffb7\061\uffb7\066\uffb7\067\uffb7\072" +
    "\uffb7\104\uffb7\001\002\000\022\033\uffaa\034\uffaa\036\uffaa" +
    "\037\uffaa\044\uffaa\045\uffaa\072\uffaa\104\uffaa\001\002\000" +
    "\022\033\uffa8\034\uffa8\036\uffa8\037\uffa8\044\uffa8\045\uffa8" +
    "\072\uffa8\104\uffa8\001\002\000\032\033\uffb9\034\uffb9\036" +
    "\uffb9\037\uffb9\044\uffb9\045\uffb9\060\uffb9\061\uffb9\066\uffb9" +
    "\067\uffb9\072\uffb9\104\uffb9\001\002\000\022\033\uffad\034" +
    "\uffad\036\uffad\037\uffad\044\uffad\045\uffad\072\uffad\104\uffad" +
    "\001\002\000\032\033\uffb8\034\uffb8\036\uffb8\037\uffb8\044" +
    "\uffb8\045\uffb8\060\uffb8\061\uffb8\066\uffb8\067\uffb8\072\uffb8" +
    "\104\uffb8\001\002\000\022\033\uffab\034\uffab\036\uffab\037" +
    "\uffab\044\uffab\045\uffab\072\uffab\104\uffab\001\002\000\032" +
    "\033\uffba\034\uffba\036\uffba\037\uffba\044\uffba\045\uffba\060" +
    "\uffba\061\uffba\066\uffba\067\uffba\072\uffba\104\uffba\001\002" +
    "\000\022\033\uffa9\034\uffa9\036\uffa9\037\uffa9\044\uffa9\045" +
    "\uffa9\072\uffa9\104\uffa9\001\002\000\022\033\uffac\034\uffac" +
    "\036\uffac\037\uffac\044\uffac\045\uffac\072\uffac\104\uffac\001" +
    "\002\000\032\033\uffb5\034\uffb5\036\uffb5\037\uffb5\044\uffb5" +
    "\045\uffb5\060\uffb5\061\uffb5\066\uffb5\067\uffb5\072\uffb5\104" +
    "\uffb5\001\002\000\032\033\046\034\053\036\060\037\042" +
    "\044\055\045\044\060\037\061\065\066\054\067\061\072" +
    "\040\104\062\001\002\000\064\002\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\035\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\053\uffbc\054\uffbc\060\111\061\116\062\113" +
    "\063\106\064\115\065\107\070\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\102\uffbc\001\002\000\100\002\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\035\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\056\uffb4\060\uffb4\061\uffb4\062" +
    "\075\063\077\064\076\065\uffb4\070\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\102\uffb4\001\002\000\034\033\046\034" +
    "\053\036\060\037\042\044\055\045\044\055\041\060\037" +
    "\061\065\066\054\067\061\072\040\104\062\001\002\000" +
    "\040\033\046\034\053\036\060\037\042\044\055\045\044" +
    "\055\041\060\037\061\065\066\054\067\061\070\uff9d\072" +
    "\040\073\uff9d\104\062\001\002\000\006\070\127\073\130" +
    "\001\002\000\006\070\uff9e\073\uff9e\001\002\000\034\033" +
    "\046\034\053\036\060\037\042\044\055\045\044\055\041" +
    "\060\037\061\065\066\054\067\061\072\040\104\062\001" +
    "\002\000\100\002\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\035\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\056\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\070\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\102\uffa0" +
    "\001\002\000\006\070\uff9f\073\uff9f\001\002\000\006\070" +
    "\133\102\134\001\002\000\034\033\046\034\053\036\060" +
    "\037\042\044\055\045\044\055\041\060\037\061\065\066" +
    "\054\067\061\072\040\104\062\001\002\000\102\002\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\035\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\070\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\076\uffa2\102\uffa2\001\002\000" +
    "\004\102\136\001\002\000\102\002\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\uffa1\035\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\070\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\102\uffa1\001\002\000\050\002\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\035\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\053\uffbf\054\uffbf\070\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\102\uffbf\001\002\000\004" +
    "\073\141\001\002\000\100\002\uff90\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\035\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\054\uff90\056\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\070\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\102\uff90\001\002\000\004\037\143\001\002\000\004" +
    "\072\144\001\002\000\024\024\020\025\015\035\011\040" +
    "\026\041\016\042\027\043\010\070\uffee\073\uffee\001\002" +
    "\000\006\070\uffef\073\uffef\001\002\000\004\037\311\001" +
    "\002\000\006\070\150\073\151\001\002\000\020\024\020" +
    "\025\015\035\011\040\026\041\016\042\027\043\010\001" +
    "\002\000\004\100\152\001\002\000\052\003\uffe9\004\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\014\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\024\uffe9\025\uffe9\035\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\076\uffe9\101\uffe9\001\002\000" +
    "\032\002\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\035\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\076\ufff1\001" +
    "\002\000\052\003\177\004\164\007\167\011\205\012\163" +
    "\014\174\016\160\017\157\020\162\021\025\024\020\025" +
    "\015\035\011\037\161\040\026\041\016\042\027\043\010" +
    "\076\017\101\155\001\002\000\072\002\uffeb\003\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\035\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\076\uffeb\101\uffeb\001" +
    "\002\000\056\003\uffe8\004\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\024\uffe8\025\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\076\uffe8\101\uffe8\001\002\000\004\072" +
    "\305\001\002\000\034\033\046\034\053\036\060\037\042" +
    "\044\055\045\044\055\041\060\037\061\065\066\054\067" +
    "\061\072\040\104\062\001\002\000\010\057\221\072\124" +
    "\103\123\001\002\000\004\072\301\001\002\000\004\072" +
    "\260\001\002\000\004\072\242\001\002\000\004\075\241" +
    "\001\002\000\056\003\uffde\004\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\024\uffde\025\uffde\035\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\076\uffde\101\uffde\001\002\000\004" +
    "\100\152\001\002\000\004\057\231\001\002\000\056\003" +
    "\uffea\004\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\024\uffea\025" +
    "\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\076\uffea\101\uffea\001\002\000\056\003\uffdc\004\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\024\uffdc\025\uffdc\035\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\076\uffdc\101\uffdc" +
    "\001\002\000\004\075\230\001\002\000\004\075\227\001" +
    "\002\000\004\075\226\001\002\000\004\075\225\001\002" +
    "\000\056\003\uffdb\004\uffdb\007\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\024\uffdb\025\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\076\uffdb\101\uffdb\001\002\000\056\003\uffe0" +
    "\004\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0" +
    "\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\076" +
    "\uffe0\101\uffe0\001\002\000\004\075\224\001\002\000\056" +
    "\003\uffdf\004\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\076\uffdf\101\uffdf\001\002\000\056\003\uffdd\004\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd\035\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\076\uffdd\101" +
    "\uffdd\001\002\000\004\075\223\001\002\000\004\072\206" +
    "\001\002\000\024\021\025\024\020\025\015\035\011\037" +
    "\211\040\026\041\016\042\027\043\010\001\002\000\004" +
    "\075\uffd3\001\002\000\004\075\uffd2\001\002\000\006\057" +
    "\221\103\123\001\002\000\004\075\213\001\002\000\034" +
    "\033\046\034\053\036\060\037\042\044\055\045\044\055" +
    "\041\060\037\061\065\066\054\067\061\072\040\104\062" +
    "\001\002\000\004\075\215\001\002\000\034\033\046\034" +
    "\053\036\060\037\042\044\055\045\044\055\041\060\037" +
    "\061\065\066\054\067\061\072\040\104\062\001\002\000" +
    "\004\073\217\001\002\000\004\100\152\001\002\000\056" +
    "\003\uffd4\004\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4" +
    "\025\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\076\uffd4\101\uffd4\001\002\000\034\033\046\034\053" +
    "\036\060\037\042\044\055\045\044\055\041\060\037\061" +
    "\065\066\054\067\061\072\040\104\062\001\002\000\004" +
    "\075\uffc4\001\002\000\056\003\uffe7\004\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\024\uffe7\025\uffe7\035\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\076\uffe7\101\uffe7\001\002" +
    "\000\056\003\uffe5\004\uffe5\007\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\024\uffe5\025\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\076\uffe5\101\uffe5\001\002\000\056\003\uffe4" +
    "\004\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\024\uffe4\025\uffe4" +
    "\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\076" +
    "\uffe4\101\uffe4\001\002\000\056\003\uffe3\004\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\024\uffe3\025\uffe3\035\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\076\uffe3\101\uffe3\001" +
    "\002\000\056\003\uffe2\004\uffe2\007\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\024\uffe2\025\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\076\uffe2\101\uffe2\001\002\000\056\003" +
    "\uffe1\004\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\024\uffe1\025" +
    "\uffe1\035\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\076\uffe1\101\uffe1\001\002\000\034\033\046\034\053\036" +
    "\060\037\042\044\055\045\044\055\041\060\037\061\065" +
    "\066\054\067\061\072\040\104\062\001\002\000\004\075" +
    "\uffc3\001\002\000\004\010\234\001\002\000\004\072\235" +
    "\001\002\000\034\033\046\034\053\036\060\037\042\044" +
    "\055\045\044\055\041\060\037\061\065\066\054\067\061" +
    "\072\040\104\062\001\002\000\004\073\237\001\002\000" +
    "\004\075\240\001\002\000\056\003\uffd5\004\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\035\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\076\uffd5\101\uffd5\001" +
    "\002\000\056\003\uffe6\004\uffe6\007\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\024\uffe6\025\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\076\uffe6\101\uffe6\001\002\000\034\033" +
    "\046\034\053\036\060\037\042\044\055\045\044\055\041" +
    "\060\037\061\065\066\054\067\061\072\040\104\062\001" +
    "\002\000\004\073\244\001\002\000\004\100\152\001\002" +
    "\000\062\003\uffd8\004\uffd8\005\246\006\uffd8\007\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\024\uffd8\025\uffd8\035\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\076\uffd8\101\uffd8\001\002" +
    "\000\004\072\253\001\002\000\060\003\uffd6\004\uffd6\006" +
    "\251\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\024\uffd6\025\uffd6\035" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\076\uffd6" +
    "\101\uffd6\001\002\000\056\003\uffda\004\uffda\007\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\024\uffda\025\uffda\035\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\076\uffda\101\uffda\001\002" +
    "\000\004\100\152\001\002\000\056\003\uffd7\004\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\076\uffd7\101\uffd7" +
    "\001\002\000\034\033\046\034\053\036\060\037\042\044" +
    "\055\045\044\055\041\060\037\061\065\066\054\067\061" +
    "\072\040\104\062\001\002\000\004\073\255\001\002\000" +
    "\004\100\152\001\002\000\062\003\uffd8\004\uffd8\005\246" +
    "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\024\uffd8\025\uffd8" +
    "\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\076" +
    "\uffd8\101\uffd8\001\002\000\060\003\uffd9\004\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\035\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\076\uffd9\101" +
    "\uffd9\001\002\000\034\033\046\034\053\036\060\037\042" +
    "\044\055\045\044\055\041\060\037\061\065\066\054\067" +
    "\061\072\040\104\062\001\002\000\004\073\262\001\002" +
    "\000\004\100\263\001\002\000\010\013\uffcf\015\uffcf\101" +
    "\uffcf\001\002\000\010\013\270\015\265\101\uffca\001\002" +
    "\000\004\071\277\001\002\000\004\101\276\001\002\000" +
    "\010\013\uffd0\015\uffd0\101\uffd0\001\002\000\006\034\272" +
    "\036\271\001\002\000\004\071\uffcd\001\002\000\004\071" +
    "\uffcc\001\002\000\004\071\274\001\002\000\056\003\uffe9" +
    "\004\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9" +
    "\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\076" +
    "\uffe9\101\uffe9\001\002\000\056\003\177\004\164\007\167" +
    "\011\205\012\163\013\uffce\014\174\015\uffce\016\160\017" +
    "\157\020\162\021\025\024\020\025\015\035\011\037\161" +
    "\040\026\041\016\042\027\043\010\076\017\101\uffce\001" +
    "\002\000\056\003\uffd1\004\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\024\uffd1\025\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\076\uffd1\101\uffd1\001\002\000\052\003" +
    "\uffe9\004\uffe9\007\uffe9\011\uffe9\012\uffe9\014\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\035\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\076\uffe9\101\uffe9" +
    "\001\002\000\052\003\177\004\164\007\167\011\205\012" +
    "\163\014\174\016\160\017\157\020\162\021\025\024\020" +
    "\025\015\035\011\037\161\040\026\041\016\042\027\043" +
    "\010\076\017\101\uffcb\001\002\000\034\033\046\034\053" +
    "\036\060\037\042\044\055\045\044\055\041\060\037\061" +
    "\065\066\054\067\061\072\040\104\062\001\002\000\004" +
    "\073\303\001\002\000\004\075\uff9a\001\002\000\004\075" +
    "\uff9c\001\002\000\004\037\306\001\002\000\004\073\307" +
    "\001\002\000\004\075\uff9b\001\002\000\006\070\ufff0\073" +
    "\ufff0\001\002\000\006\070\uffed\073\uffed\001\002\000\040" +
    "\002\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\035" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\057\034\074\313" +
    "\075\uffc5\076\uffc5\001\002\000\034\033\046\034\053\036" +
    "\060\037\042\044\055\045\044\055\041\060\037\061\065" +
    "\066\054\067\061\072\040\104\062\001\002\000\034\002" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\035\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\075\uffc9\076\uffc9\001" +
    "\002\000\004\074\316\001\002\000\034\033\046\034\053" +
    "\036\060\037\042\044\055\045\044\055\041\060\037\061" +
    "\065\066\054\067\061\072\040\104\062\001\002\000\034" +
    "\002\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\035" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\075\uffc8\076\uffc8" +
    "\001\002\000\004\037\ufff3\001\002\000\064\002\ufff9\003" +
    "\ufff9\004\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\035\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\076\ufff9\101\ufff9\001\002\000\004\037" +
    "\ufff2\001\002\000\004\073\324\001\002\000\004\100\152" +
    "\001\002\000\030\002\uffec\021\uffec\022\uffec\024\uffec\025" +
    "\uffec\035\uffec\040\uffec\041\uffec\042\uffec\043\uffec\076\uffec" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\004\003\003\001\001\000\016\004" +
    "\020\005\021\006\027\045\013\053\011\055\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\141\001\001\000\004\005\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\030\001\001\000" +
    "\014\004\020\005\021\045\013\053\011\055\022\001\001" +
    "\000\002\001\001\000\004\044\034\001\001\000\026\012" +
    "\042\013\063\014\056\015\046\016\051\017\047\023\055" +
    "\024\044\047\050\054\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\042\013\063" +
    "\014\056\015\046\016\137\017\047\023\055\024\044\047" +
    "\050\054\062\001\001\000\022\012\042\014\136\015\046" +
    "\017\047\023\055\024\044\047\050\054\062\001\001\000" +
    "\002\001\001\000\006\021\117\022\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\071\024\044\047" +
    "\050\001\001\000\004\020\065\001\001\000\002\001\001" +
    "\000\022\012\042\014\070\015\046\017\047\023\055\024" +
    "\044\047\050\054\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\101\024\044\047\050" +
    "\001\001\000\010\015\100\024\044\047\050\001\001\000" +
    "\010\015\077\024\044\047\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\046\017\121\024\044\047\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\120\015\046\017\047\023\055" +
    "\024\044\047\050\054\062\001\001\000\004\022\103\001" +
    "\001\000\002\001\001\000\026\012\042\013\063\014\056" +
    "\015\046\016\131\017\047\023\055\024\044\047\050\054" +
    "\062\001\001\000\030\012\042\013\063\014\056\015\046" +
    "\016\125\017\047\023\055\024\044\027\124\047\050\054" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\042\013\063\014\056\015\046\016\130\017\047\023" +
    "\055\024\044\047\050\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\042\013" +
    "\063\014\056\015\046\016\134\017\047\023\055\024\044" +
    "\047\050\054\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\145\025\146\026\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\145\026" +
    "\307\001\001\000\004\007\152\001\001\000\004\010\153" +
    "\001\001\000\002\001\001\000\040\005\021\011\170\024" +
    "\167\030\155\033\201\036\165\037\202\040\171\045\203" +
    "\046\164\047\172\050\200\051\175\052\174\055\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\042\013\063\014\056\015\046\016\303\017" +
    "\047\023\055\024\044\047\050\054\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\021\024\167\031" +
    "\211\045\206\046\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\042\013\063\014\056\015\046\016\213\017\047\023\055" +
    "\024\044\047\050\054\062\001\001\000\002\001\001\000" +
    "\026\012\042\013\063\014\056\015\046\016\215\017\047" +
    "\023\055\024\044\047\050\054\062\001\001\000\002\001" +
    "\001\000\004\007\217\001\001\000\002\001\001\000\026" +
    "\012\042\013\063\014\056\015\046\016\221\017\047\023" +
    "\055\024\044\047\050\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\042\013\063\014\056\015\046\016\231\017\047\023" +
    "\055\024\044\047\050\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\042\013" +
    "\063\014\056\015\046\016\235\017\047\023\055\024\044" +
    "\047\050\054\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\042" +
    "\013\063\014\056\015\046\016\242\017\047\023\055\024" +
    "\044\047\050\054\062\001\001\000\002\001\001\000\004" +
    "\007\244\001\001\000\004\034\246\001\001\000\002\001" +
    "\001\000\004\035\247\001\001\000\002\001\001\000\004" +
    "\007\251\001\001\000\002\001\001\000\026\012\042\013" +
    "\063\014\056\015\046\016\253\017\047\023\055\024\044" +
    "\047\050\054\062\001\001\000\002\001\001\000\004\007" +
    "\255\001\001\000\004\034\256\001\001\000\002\001\001" +
    "\000\026\012\042\013\063\014\056\015\046\016\260\017" +
    "\047\023\055\024\044\047\050\054\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\263\001\001\000" +
    "\006\032\265\042\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\274\001\001\000\040\005\021\011\170\024\167\030" +
    "\155\033\201\036\165\037\202\040\171\045\203\046\164" +
    "\047\172\050\200\051\175\052\174\055\177\001\001\000" +
    "\002\001\001\000\004\010\277\001\001\000\040\005\021" +
    "\011\170\024\167\030\155\033\201\036\165\037\202\040" +
    "\171\045\203\046\164\047\172\050\200\051\175\052\174" +
    "\055\177\001\001\000\026\012\042\013\063\014\056\015" +
    "\046\016\301\017\047\023\055\024\044\047\050\054\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\313\001" +
    "\001\000\026\012\042\013\063\014\056\015\046\016\314" +
    "\017\047\023\055\024\044\047\050\054\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\042\013\063" +
    "\014\056\015\046\016\316\017\047\023\055\024\044\047" +
    "\050\054\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\324\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Conectar este parser con un scanner
    BasicLexerCup lex;
    public static final int EXPECTED_CONFLICTS = 12;
    
    // Variables para manejo de errores
    public int errorCount = 0;
    private ErrorHandler errorHandler;
    
    // Método para establecer el ErrorHandler
    public void setErrorHandler(ErrorHandler handler) {
        this.errorHandler = handler;
    }
    
    // Método para reportar errores
    public void report_error(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder();
        int line = 0;
        int column = 0;
        
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                line = s.left + 1;
                if (s.right >= 0) {
                    column = s.right + 1;
                }
            }
        }
        
        // Usar el ErrorHandler si está disponible
        if (errorHandler != null) {
            errorHandler.reportError(line, column, message, "SINTÁCTICO");
        } else {
            // Fallback al comportamiento original
            errorMessage.append("Error sintáctico: ");
            if (line > 0) {
                errorMessage.append("línea " + line);
                if (column > 0) {
                    errorMessage.append(", columna " + column);
                }
            }
            errorMessage.append(": " + message);
            //System.err.println(errorMessage.toString());
        }
        
        errorCount++;
    }
    
    // Método para recuperación de errores
    public void syntax_error(Symbol cur_token) {
        String tokenName = symbl_name_from_id(cur_token.sym);
        String tokenValue = (cur_token.value != null) ? cur_token.value.toString() : "?";
        
        //report_error("Error cerca de " + tokenName + " '" + tokenValue + "'", cur_token);
        
        // Si hay un ErrorHandler y está en pánico, detener el análisis
        if (errorHandler != null && errorHandler.isInPanicMode() && !errorHandler.shouldContinue()) {
            throw new RuntimeException("Análisis sintáctico abortado en modo pánico");
        }
    }
    
    // Método para errores irrecuperables
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        // Entrar en modo pánico si hay un ErrorHandler
        if (errorHandler != null) {
            errorHandler.enterPanicMode();
            report_error("Error sintáctico fatal. Compilación abortada", cur_token);
        } else {
            report_error("Error sintáctico fatal. Compilación abortada", cur_token);
        }
        
        throw new java.lang.Exception("Error sintáctico irrecuperable");
    }
    
    
    public String symbl_name_from_id(int id) {
        return (id >= 0 && id < sym.terminalNames.length) ? 
               sym.terminalNames[id] : "UNKNOWN_TOKEN";
    }

    @SuppressWarnings("deprecation")
    public parser(BasicLexerCup lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        
        // Si el lexer tiene un ErrorHandler, lo usamos
        if (lex != null) {
            try {
                // Usamos reflection para obtener el errorHandler del lexer
                java.lang.reflect.Field f = lex.getClass().getDeclaredField("errorHandler");
                f.setAccessible(true);
                Object handler = f.get(lex);
                if (handler instanceof ErrorHandler) {
                    this.errorHandler = (ErrorHandler) handler;
                    System.out.println("ErrorHandler conectado desde lexer a parser");
                }
            } catch (Exception e) {
                System.err.println("No se pudo obtener ErrorHandler del lexer: " + e.getMessage());
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /* CÓDIGO DE JAVA */
    public void hola(){
        System.out.println("Inicio Cup");
    }

    public void adios(){
        System.out.println("Fin Cup");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones funcion_main declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error 
            {
              Object RESULT =null;
		
                report_error("Error en la estructura del programa", cur_token);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comentario ::= INIT_COMMENT END_COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentario",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= INTEGER_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= STRING_T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_dato ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_dato ::= ARRX tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_dato ::= MATRX tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= FUNCTION tipo_dato IDENTIFIER ESH_IZ lista_parametros EZH_DE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= tipo_dato IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_main ::= MAIN ESH_IZ EZH_DE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque ::= INIT_BLOC sentencias END_BLOC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= estructura_control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= declaracion_var FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= asignacion FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= retorno FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= lectura FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= escritura FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= BREAK FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= llamada_funcion FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estructura_control ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estructura_control ::= do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estructura_control ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estructura_control ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // estructura_control ::= error 
            {
              Object RESULT =null;
		
                         report_error("Error en estructura de control", cur_token);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_stmt ::= IF ESH_IZ exprPrin EZH_DE bloque elif_list else_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elif_list ::= ELIF ESH_IZ exprPrin EZH_DE bloque elif_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elif_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else_stmt ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else_stmt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // do_while ::= DO bloque WHILE ESH_IZ exprPrin EZH_DE FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for_stmt ::= FOR ESH_IZ init_for FINLINEA exprPrin FINLINEA exprPrin EZH_DE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // init_for ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // init_for ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_for",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // switch_stmt ::= SWITCH ESH_IZ exprPrin EZH_DE INIT_BLOC case_list default_case END_BLOC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // case_list ::= case_list case_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // case_item ::= CASE case_value DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_item",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // case_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // case_value ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_value",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // default_case ::= DEFAULT DOSPUNTOS sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // default_case ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_var ::= tipo_dato IDENTIFIER declaracion_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_var ::= tipo_dato IDENTIFIER PIPE exprPrin PIPE exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_var ::= GLOBAL tipo_dato IDENTIFIER declaracion_init FINLINEA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_init ::= ASIGNA exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_init",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_init ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_init",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= IDENTIFIER ASIGNA exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= accesoArreglo ASIGNA exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprPrin ::= exprLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprPrin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprLog ::= exprLog operadorLog exprRel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprLog ::= exprRel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprLog ::= NEGACION exprRel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operadorLog ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operadorLog ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLog",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprRel ::= exprArit operadorRel exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprRel ::= exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadorRel ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadorRel ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadorRel ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadorRel ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadorRel ::= COMPARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadorRel ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprArit ::= exprArit operadorArit termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exprArit ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exprArit ::= operandoUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino ::= termino MULTIPLICA factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino ::= termino MODULO factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorArit ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorArit ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadorArit ::= MULTIPLICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadorArit ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadorArit ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadorArit ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorArit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operandoUnario ::= signo_unario factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operandoUnario ::= INCREMENTO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operandoUnario ::= DECREMENTO IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandoUnario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // signo_unario ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo_unario",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // signo_unario ::= RESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo_unario",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // accesoArreglo ::= IDENTIFIER BRACEIZQ exprPrin BRACEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // accesoArreglo ::= IDENTIFIER BRACEIZQ exprPrin COMA exprPrin BRACEDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArreglo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // llamada_funcion ::= IDENTIFIER ESH_IZ lista_expresiones EZH_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_expresiones ::= lista_expresiones COMA exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_expresiones ::= exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_expresiones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // retorno ::= RETURN exprPrin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lectura ::= LEER ESH_IZ IDENTIFIER EZH_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // escritura ::= IMPRIMIR ESH_IZ exprPrin EZH_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= accesoArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= ESH_IZ exprPrin EZH_DE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
